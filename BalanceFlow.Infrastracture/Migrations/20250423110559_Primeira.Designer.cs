// <auto-generated />
using System;
using BalanceFlow.Infrastracture.Connections;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BalanceFlow.Infrastracture.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250423110559_Primeira")]
    partial class Primeira
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BalanceFlow.Domain.Entity.CashEntryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(14,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DailyBalanceId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("DailyBalanceId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("BalanceFlow.Domain.Entity.DailyBalanceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BalanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("FinalBalance")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("TotalCredit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(14,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalDebit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(14,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("BalanceDate")
                        .IsUnique();

                    b.ToTable("daily_balances", (string)null);
                });

            modelBuilder.Entity("BalanceFlow.Domain.Entity.CashEntryEntity", b =>
                {
                    b.HasOne("BalanceFlow.Domain.Entity.DailyBalanceEntity", "DailyBalance")
                        .WithMany("CashEntries")
                        .HasForeignKey("DailyBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyBalance");
                });

            modelBuilder.Entity("BalanceFlow.Domain.Entity.DailyBalanceEntity", b =>
                {
                    b.Navigation("CashEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
